GAL16V8
BusDecoder32

CLK A31  A30 A29 A28 A27 A26    A25 A24 GND
OE  RAM  NC FLSH IO  DEN MIRROR NC  NC  VCC


/FLSH = /A31 * /A30 * /A29 * /A28 * /A27 * /A26 * /A25 * /A24 * /MIRROR * /DEN + A31 * A30 * A29 * A28 * A27 * A26 * A25 * /A24 * /DEN
/IO = A31 * A30 * A29 * A28 * A27 * A26 * /A25 * A24 * /DEN
/RAM = FLSH * IO * /DEN

DESCRIPTION

This chip is responsible for carving up the i960 memory space into several
parts. This includes:

-- Flash
-- RAM 
-- I/O Primary
-- CPU Internal (implied)

We operate on 16 megabyte sections because it is the cleanest to work with
overall. The upper most 8-bits are used to detect one of the four sections.
Further GAL chips can be used to split this down into multiple sub portions as
well.

Flash is special because it needs to be mapped into two separate locations.
0x00000000 (for Sx and Kx based targets) and 0xFE000000 (for Hx and Jx targets). 

Ideally, this mirroring also allows us to unmap the unused portion to allow us
to free up memory as well after boot is complete. 

In the case of the Sx and Kx chips, we want to actually jump to the upper most
2 megabytes of the 0xFE mirror. So we would jump to 0xFEE01000 as the starting
boot vector in all cases. This will always be a safe starting vector in _all_
cases. The processor will be responsible for turning off the mapping through
memory mapped I/O which talks to the conductor

